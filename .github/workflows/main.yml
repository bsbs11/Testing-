name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    # IMPORTANT: For >6 hours runtime you MUST use a self-hosted runner.
    # Change to 'self-hosted' and register a Windows self-hosted runner on your VM.
    runs-on: self-hosted
    timeout-minutes: 7200  # 5 days = 7200 minutes (self-hosted jobs can run up to 5 days)

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and (optionally) disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove existing rule (avoid duplicates) and open 3389
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User with fixed credentials
        shell: powershell
        run: |
          # ---------------------------
          # FIXED credentials (as requested)
          # ---------------------------
          $username = "rudowner"
          $plainPassword = "rudowner1"

          # If you prefer to keep password in GitHub Secrets (recommended), uncomment:
          # $plainPassword = "${{ secrets.RDP_PASSWORD }}"

          $securePass = ConvertTo-SecureString $plainPassword -AsPlainText -Force

          # If user already exists, remove and recreate to ensure known password & groups
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "User $username already exists. Resetting password and groups..."
            # set password
            $u = Get-LocalUser -Name $username
            $u | Set-LocalUser -Password $securePass
          } else {
            New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          }

          # Add to groups
          if (-not (Get-LocalGroup -Name "Remote Desktop Users" -ErrorAction SilentlyContinue)) {
            New-LocalGroup -Name "Remote Desktop Users"
          }
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue

          # Give Administrator if you want (uncomment if desired)
          # Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue

          # DO NOT echo plain password to logs. If you need to pass creds back, use repository secrets or Actions outputs with caution.
          Write-Host "User '$username' is present and configured."

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          # You can write it to env if needed (but be careful with logs)
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"
